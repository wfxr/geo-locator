def getVersion = { ->
    def p = 'git describe --tags'.execute(); p.waitFor()
    def version = p.exitValue() == 0 ? p.text.trim() : '0.0.0'
    def dirty = 'git status -s'.execute().text.trim()
    return dirty ? "${version}-SNAPSHOT" : version
}

group 'com.github.wfxr'
version getVersion()

buildscript {
    ext.junitVersion = "5.3.0"

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.70"
    }
}

apply plugin: 'kotlin'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    compile group: 'ch.hsr', name: 'geohash', version: '1.3.0'
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'
    compile group: 'com.github.davidmoten', name: 'rtree', version: '0.8.6'
    compile 'com.github.wfxr:jsi:2.1.1'

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed", "passed"
    }
    filter {
        includeTestsMatching "*Test"
    }
}

compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }
